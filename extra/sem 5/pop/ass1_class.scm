(define (count x l acc)
	(cond((null? l) acc)
		((= x (car l)) (count x (cdr l) (+ acc 1)))
		(else(count x (cdr l) acc))))
(define (join x y)
	(cons x y))
(define (count-num x l)
	(join x (count x l 0)))
(define (remove x l)
	(cond ((null? l)l)
		((= x (car l))(remove x (cdr l)))
		(else(cons (car l) (remove x (cdr l))))))
(define (check? x l)
	(cond((null? l) #f)
		((eq? x (car l)))
		(else(check? (cdr l)))))
(define (recnum x l)
	(cond ((null? l))
		((check? x l) (begin (count-num x l)
								(remove x l)))))
(define (diffnum l)
	(if(null? l) '()
		(cons (car l) (diffnum (remove (car l) l)))))
(define (new l)
	(if(null? (diffnum l)) '()
		(cons (count-num (car (diffnum l)) l) (new (remove (car (diffnum l)) l)))))

(new '(12 3 2 23 23 45 393  453 3 204 394 3340 094 884 004 093 0 494  18 34))